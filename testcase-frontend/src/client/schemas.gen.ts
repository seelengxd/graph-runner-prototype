// This file is auto-generated by @hey-api/openapi-ts

export const $Edge = {
    properties: {
        start: {
            type: 'integer',
            title: 'Start'
        },
        end: {
            type: 'integer',
            title: 'End'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['start', 'end', 'id'],
    title: 'Edge'
} as const;

export const $EdgeBase = {
    properties: {
        start: {
            type: 'integer',
            title: 'Start'
        },
        end: {
            type: 'integer',
            title: 'End'
        }
    },
    type: 'object',
    required: ['start', 'end'],
    title: 'EdgeBase'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $Node = {
    properties: {
        type: {
            '$ref': '#/components/schemas/NodeType'
        },
        label: {
            type: 'string',
            title: 'Label'
        },
        code: {
            type: 'string',
            title: 'Code'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['type', 'label', 'code', 'id'],
    title: 'Node'
} as const;

export const $NodeBase = {
    properties: {
        type: {
            '$ref': '#/components/schemas/NodeType'
        },
        label: {
            type: 'string',
            title: 'Label'
        },
        code: {
            type: 'string',
            title: 'Code'
        }
    },
    type: 'object',
    required: ['type', 'label', 'code'],
    title: 'NodeBase'
} as const;

export const $NodeNew = {
    properties: {
        type: {
            '$ref': '#/components/schemas/NodeType'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'NodeNew'
} as const;

export const $NodeType = {
    type: 'string',
    enum: ['input', 'output', 'user_program', 'program', 'comparator'],
    title: 'NodeType'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;